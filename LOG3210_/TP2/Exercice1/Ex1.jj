PARSER_BEGIN(Exercice1)

class Exercice1
{
	
	public static void main(String args[])
	{
		Exercice1 p = new Exercice1( new java.io.DataInputStream(System.in));
		try {
			int val = p.Program();
			System.out.println(val);
		} catch (Exception e) {
			System.out.println("Erreur: " + '\n' + e);
			System.exit(-1);
		}
	}
}

PARSER_END(Exercice1)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
	<COMPARE: < LESS > | < LESSEQUAL > | < GREAT > | <GREATEQUAL > | < DIFF > | < EQUALEQUAL > > |
	< #LESS: "<" > | 
	< #LESSEQUAL: "<=" > | 
	< #GREAT: ">" > | 
	< #GREATEQUAL: ">=" > | 
	< #DIFF: "!=" > | 
	< #EQUALEQUAL: "==" > |
	<TOK: ["1"-"9"] (["0"-"9"])* | "0" >
}



int Program() : { int total = 0;}
{
	total = CompExpr() ";" <EOF> { return total; }
	
}

int CompExpr() : 
{
	Token t;
	int total;
	int a;
	int compteur = 0;
}
{
	a = AndOrExpr() {total = a;} ( <COMPARE> a = AndOrExpr() {++compteur;})*
	{ 
		if(compteur == 0)
			return total;
		else
		{
			if(total == a)
				return 1;
			else 
				return 0;
		}
	}
}

int AndOrExpr() : {int total; int a; int isAnd = 0;}
{
	a = NotExpr() {total = a;}

	( ("&&" {isAnd = 1;} | "||" {isAnd = 0;} ) a = NotExpr() 
		{
			if(isAnd == 1)
			{
				if((total > 0) && (a > 0))
					return 1;
				else;
					return 0;
			}
			else
			{
				if((total > 0) || (a > 0))
					return 1;
				else;
					return 0;
			}
		}
	)*
	{ return total; }
}

int NotExpr() : {int compteur = 0; int total;}
{
	("not" {++compteur;})* 
	total = AddExpr()
	{ return total; }
}

int AddExpr() : {int total; int a; int isAdd = 0;}
{
	a = MultExpr() { total = a; }
	(	(
		"+" {isAdd = 1;}
		|
		"-" {isAdd = 0;}
		) a = MultExpr()	{
								if(isAdd == 1)
								{
									total = total + a;
								}
								else
								{
									total = total - a;
								}
							} 

	)*
	{ return total; }
}

int MultExpr() : {int total; int a; int isMult = 0;}
{
	a = PowExpr() { total = a; }
	( 	(
		"*" {isMult = 1;}
		| 
		"/" {isMult = 0;}
		) a = PowExpr() {
							if(isMult == 1)
							{
								total = total * a;
							}
							else
							{
								total = total / a;
							}
						}
	)*
	{ return total; }
}

int PowExpr() : {int total=0; int a;}
{
	a = NegExpr() { total = a; }

	( "^" a = NegExpr() { total = total ^ a;} )*
	{ return total; }
}

int NegExpr() : {int compteur = 0;}
{
	("-"{++compteur;})* 
	{
		if(compteur%2 != 0)
			return -BasicExpr();
		else
			return BasicExpr();
	}
	
}

int BasicExpr() : {int a; Token t;}
{
	t = <TOK> 
	{ 
	    a = Integer.parseInt(t.image); 
	    return a;
  	}
  | 
	"(" a = CompExpr() ")" {return a;}
}


