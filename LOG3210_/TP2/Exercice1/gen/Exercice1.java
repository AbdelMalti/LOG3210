/* Generated By:JavaCC: Do not edit this line. Exercice1.java */
class Exercice1 implements Exercice1Constants {

        public static void main(String args[])
        {
                Exercice1 p = new Exercice1( new java.io.DataInputStream(System.in));
                try {
                        int val = p.Program();
                        System.out.println(val);
                } catch (Exception e) {
                        System.out.println("Erreur: " + '\u005cn' + e);
                        System.exit(-1);
                }
        }

  static final public int Program() throws ParseException {
        int total = 0;
    total = CompExpr();
    jj_consume_token(13);
    jj_consume_token(0);
                                       {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

  static final public int CompExpr() throws ParseException {
        Token t;
        int total;
    total = AndOrExpr();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMPARE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMPARE);
      AndOrExpr();
    }
         {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

  static final public int AndOrExpr() throws ParseException {
        int a;
        int total;
    a = NotExpr();
                        total = a;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(14);
      a = NotExpr();
                        if((total > 0) && (a > 0))
                        {
                                //total = 1;
                                {{if (true) return 1;}}
                        }
                        else
                        {
                                //total = 0;
                                {{if (true) return 0;}}
                        }
    }
          {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

  static final public int NotExpr() throws ParseException {
        int a;
        int total = 0;
        int compteur = 0;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOK:
      case 16:
      case 18:
      case 22:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 16:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
        jj_consume_token(16);
                  compteur++;
      }
      a = AddExpr();
        if(compteur > 0)
                {
                        //total = !a;
                        if(compteur % 2 == 0)
                        {
                                //total = 0;
                                {{if (true) return 0;}}
                        }
                        else
                        {
                                //total = 1;
                                {{if (true) return 1;}}
                        }
                }
    }
          {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

  static final public int AddExpr() throws ParseException {
        int a;
        int total;
    a = MultExpr();
                         total = a;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_6;
      }
      jj_consume_token(17);
      a = MultExpr();
                                      total = total + a;
    }
          {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

  static final public int MultExpr() throws ParseException {
        int a;
        int total;
    a = PowExpr();
                        total = a;
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
      case 20:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        jj_consume_token(19);
        a = PowExpr();
                                     total = total * a;
        break;
      case 20:
        jj_consume_token(20);
        a = PowExpr();
                                     total = total / a;
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

  static final public int PowExpr() throws ParseException {
        int a;
        int total;
    a = NegExpr();
                        total = a;
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 21:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_9;
      }
      jj_consume_token(21);
      a = NegExpr();
                             total = total ^ a;
    }
          {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

  static final public int NegExpr() throws ParseException {
        int a;
        int total;
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_10;
      }
      jj_consume_token(18);
    }
    a = BasicExpr();
                                 total = -a;
          {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

  static final public int BasicExpr() throws ParseException {
  Token t;
  int a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOK:
      t = jj_consume_token(TOK);
                        a = Integer.parseInt(t.image);
                        {if (true) return a;}
      break;
    case 22:
      jj_consume_token(22);
      CompExpr();
      jj_consume_token(23);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Exercice1TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20,0x4000,0x8000,0x451000,0x10000,0x20000,0x40000,0x180000,0x180000,0x200000,0x40000,0x401000,};
   }

  /** Constructor with InputStream. */
  public Exercice1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Exercice1(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Exercice1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Exercice1(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Exercice1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Exercice1(Exercice1TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Exercice1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
