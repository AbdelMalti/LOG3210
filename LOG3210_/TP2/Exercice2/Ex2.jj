PARSER_BEGIN(Exercice2)

class Exercice2
{
	static String[] variables = new String[20];
	static int[] isUsed = new int[20];
	static int compteur = 0;

	static String[] variablesNoneUsed = new String[20];
	static int compteNoneUsed = 0;

	public static void main(String args[])
	{
		System.out.println("Lecture de l'entree standard...");
		Exercice2 c = new Exercice2(new java.io.DataInputStream(System.in));
		try {

			String rapport = c.Program();
			System.out.println("Fichier analyse avec succes!");
			System.out.println(rapport);

			//************** Code pour les variables non declarer   ***************//

			System.out.print("Variables non declarees : ");
			for(int j=0; j < compteNoneUsed ; j++)
			{
				System.out.print(variablesNoneUsed[j]+ " ");
			}
			System.out.println();

			// ******************************************************************* //

			//************** Code pour les variables non utilisees. ***************//

			System.out.print("Variables non utilisees : ");

			for (int i = 0; i < compteur ; ++i)
			{
				if(isUsed[i] == 0)
					System.out.print(variables[i]+"  ");
			}

			System.out.println();
			//*********************************************************************//

		} catch (Exception e) {
			System.out.println("Erreur: " + '\n' + e);
			System.exit(-1);
		}
	}
}

PARSER_END(Exercice2)

//
// LEXICAL ANALYSIS
//

// White space

SKIP :
{
	< ( " " | "\t" | "\n" | "\r" )+	>
}

// Comments

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}




// Keywords
TOKEN :
{
	< IF: "if"	> |
	< ELSE: "else" > |
	< WHILE: "while" > | 
	< TYPE: < STRING > | < INT > | < FLOAT > | < BOOL > > |
	< #STRING: "string"> |
	< #INT: "int"> |
	< #FLOAT: "float" > |
	< #BOOL: "bool"> |
	< PRINT: "print" > |
	< INPUT: "input" >
	// A COMPLETER
}

// Operators
TOKEN :
{
	<ASSIGN: < EQUAL > | < PLUSEQUAL > | < MINUSEQUAL > | < POWEQUAL > | < DIVEQUAL > | < FOISEQUAL > > |
	<COMPARE: < LESS > | < LESSEQUAL > | < GREAT > | <GREATEQUAL > | < DIFF > | < EQUALEQUAL > > |
	
	< #LESS: "<" > | 
	< #LESSEQUAL: "<=" > | 
	< #GREAT: ">" > | 
	< #GREATEQUAL: ">=" > | 
	< #DIFF: "!=" > | 
	< #EQUALEQUAL: "==" > |
	
	< PLUS: "+" > |
	< MINUS: "-" > |
	< FOIS: "*" > |
	< DIV: "/" > |
	< POW: "^" > |
	< AND: "&&" > |
	< OR: "||" > |
	< NOT: "not" > |
	
	< #EQUAL: "=" > |
	< #PLUSEQUAL: "+=" > |
	< #MINUSEQUAL: "-=" > |
	< #POWEQUAL: "^=" > |
	< #DIVEQUAL: "/=" > |
	< #FOISEQUAL: "*=" > |
	< LPAREN: "(" > |
	< RPAREN: ")" > |
	< LACC: "{" > |
	< RACC: "}" > |
	< COLON: ":" > |
	< SEMICOLON: ";" > |
	< COMMA: "," >
	// A COMPLETER
}


// Identifiers and numbers
TOKEN :
{
	< IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > |
	< #LETTER: ["a"-"z","A"-"Z","_"] > |
	< #DIGIT: ["0"-"9"] > |
	< INTEGER: ["1"-"9"] (["0"-"9"])* | "0" > |
	// // Caution! Allows numbers such as "0000.23"
	< REAL: (<INTEGER>)+ "." (["0"-"9"])+ (<EXPONENT>)? |
			  (<INTEGER>)+ <EXPONENT> > |
	< #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
}







//
// SYNTAX ANALYSIS
//

String Program() : { }
{
	(DeclareStmt() ";" )*
	Block() <EOF> { return ""; }
}

void Block() : { }
{
	 ( Stmt() )*
}

void Stmt() : { }
{
	
	AssignStmt() ";" |
	IOStmt() ";" |
	WhileStmt() |
	IfStmt() 
	
	
}

void IOStmt() : {}
{
	<PRINT> "(" CompExpr() ")"  |
	<INPUT> "(" <IDENTIFIER> ")" 
}


void DeclareStmt() : {Token t; String s = "";}
{
	<TYPE> t = <IDENTIFIER> [<ASSIGN> (LOOKAHEAD(2) AssignStmt() | CompExpr() ) ] 
	{
		s = (t.image).toString();
		variables[compteur++] = s;
	}
}

int estDeclarer(Token t) :{String s;}
{
	{
		s = (t.image).toString();
		if(compteur > 0)
		{
			int compt = 0;
			for (String temp : variables)
			{
				++compt;
				if(temp.equals(s))
				{
					isUsed[compt] = 1;
					return 1;
				}else{ isUsed[compt] = 0; }
			}
		}
		return 0;
	}
}

void AssignStmt() : {Token t; int i;}
{
	(LOOKAHEAD(2) t = <IDENTIFIER> <ASSIGN>)+ CompExpr()
	{
		i = estDeclarer(t);
		String s = (t.image).toString();
		
		if( i == 0)
		{
			int isAlreadyInList = 0;
			for(int z=0; z < compteNoneUsed; z++)
			{
				if(variablesNoneUsed[z].equals(s))
					isAlreadyInList = 1;
			}
			if(isAlreadyInList == 0)
				variablesNoneUsed[compteNoneUsed++] = s;
		}
	}
}

void CompExpr() : {}
{
	AndOrExpr() ( <COMPARE> AndOrExpr() )*
}

void AndOrExpr() : {}
{
	NotExpr() ( ("&&" | "||" ) NotExpr() )*
}

void NotExpr() : {}
{
	("not")* AddExpr()
}

void AddExpr() : {}
{
	MultExpr() ( ("+"|"-") MultExpr() )*
}

void MultExpr() : {}
{
	PowExpr() ( ("*" | "/") PowExpr() )*
}

void PowExpr() : {}
{
	NegExpr() ( "^" NegExpr() )*
}

void NegExpr() : {}
{
	("-")* BasicExpr() 
}

void BasicExpr() : {}
{
	LOOKAHEAD(2) FctStmt() |
	<IDENTIFIER>|
	<INTEGER> | 
	<REAL> | 
	"(" CompExpr() ")"
}

void WhileStmt() : {}
{
	"while" CompExpr() ":" "{" Block() "}"
}

void IfStmt() : {}
{
	"if" CompExpr() ":" "{" Block() "}" ["else" "{" Block() "}"]
}


void FctStmt() : {}
{
	<IDENTIFIER>  "("  CompExpr() ["," CompExpr() ] ")"
}
