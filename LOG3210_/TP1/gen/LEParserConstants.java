/* Generated By:JJTree&JavaCC: Do not edit this line. LEParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface LEParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 6;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int CONDITION = 9;
  /** RegularExpression Id. */
  int IF = 10;
  /** RegularExpression Id. */
  int ELSE = 11;
  /** RegularExpression Id. */
  int WHILE = 12;
  /** RegularExpression Id. */
  int DO = 13;
  /** RegularExpression Id. */
  int FOR = 14;
  /** RegularExpression Id. */
  int SUITE = 15;
  /** RegularExpression Id. */
  int ARTHM = 16;
  /** RegularExpression Id. */
  int PLUS = 17;
  /** RegularExpression Id. */
  int MINUS = 18;
  /** RegularExpression Id. */
  int EQUAL = 19;
  /** RegularExpression Id. */
  int LPAREN = 20;
  /** RegularExpression Id. */
  int RPAREN = 21;
  /** RegularExpression Id. */
  int SEMICOLON = 22;
  /** RegularExpression Id. */
  int AND = 23;
  /** RegularExpression Id. */
  int OR = 24;
  /** RegularExpression Id. */
  int NOT = 25;
  /** RegularExpression Id. */
  int NOTEQUAL = 26;
  /** RegularExpression Id. */
  int GREATER = 27;
  /** RegularExpression Id. */
  int SMALLER = 28;
  /** RegularExpression Id. */
  int GTHENEQUAL = 29;
  /** RegularExpression Id. */
  int STHENEQUAL = 30;
  /** RegularExpression Id. */
  int EQUALS = 31;
  /** RegularExpression Id. */
  int MULT = 32;
  /** RegularExpression Id. */
  int DIV = 33;
  /** RegularExpression Id. */
  int EXP = 34;
  /** RegularExpression Id. */
  int DIVEGAL = 35;
  /** RegularExpression Id. */
  int MODULO = 36;
  /** RegularExpression Id. */
  int IDENTIFIER = 37;
  /** RegularExpression Id. */
  int LETTER = 38;
  /** RegularExpression Id. */
  int DIGIT = 39;
  /** RegularExpression Id. */
  int INTEGER = 40;
  /** RegularExpression Id. */
  int REAL = 41;
  /** RegularExpression Id. */
  int EXPONENT = 42;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 2;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "\"//\"",
    "<token of kind 3>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 8>",
    "<CONDITION>",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"for\"",
    "<SUITE>",
    "<ARTHM>",
    "\"+\"",
    "\"-\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"==\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"/=\"",
    "\"%\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<INTEGER>",
    "<REAL>",
    "<EXPONENT>",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"%=\"",
    "\"\\u02c6=\"",
  };

}
