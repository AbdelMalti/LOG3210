/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. LangageH17.jj */
/*@egen*/options {
	JAVA_UNICODE_ESCAPE=true;
	STATIC=false;					                                            
	           						                            
	             					                                    
	                      
}

//
// PARSER DEFINITION
//

PARSER_BEGIN(LEParser)

class LEParser/*@bgen(jjtree)*/implements LEParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTLEParserState jjtree = new JJTLEParserState();

/*@egen*/
	public static void main(String args[])
	{
		System.out.println("Lecture de l'entree standard...");
		LEParser c = new LEParser(new java.io.DataInputStream(System.in));
		try {
			SimpleNode n = c.Program();
			System.out.println("Fichier analyse avec succes!");
			n.dump(" ");
		} catch (Exception e) {
			System.out.println("Erreur: " + '\n' + e);
			System.exit(-1);
		}
	}
}

PARSER_END(LEParser)

//
// LEXICAL ANALYSIS
//

// White space

SKIP :
{
	< ( " " | "\t" | "\n" | "\r" )+	>
}

// Comments

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >  // Demander ce que ~ fait.
}





// Keywords
TOKEN :
{
	< CONDITION : <IF> | <WHILE> <DO> | <FOR> > | 
	< IF: "if"> | 
	< ELSE: "else"	> | 
	< WHILE: "while" >  | 
	< DO: "do" > | 
	< FOR: "for">
	
}

// Operators
TOKEN :
{
	< SUITE: <ARTHM> <DIGIT> > |
	< ARTHM: <PLUS> | <MINUS> | <EXP> | <MULT> | <DIV> | <MODULO> > |
	< PLUS: "+" > |
	< MINUS: "-" > |
	< EQUAL: "=" > |
	< LPAREN: "(" > |
	< RPAREN: ")" > |
	< SEMICOLON: ";" > |
	< AND: "&&" > |
	< OR: "||"> |
	< NOT: "!"> |
	< NOTEQUAL: "!=" > |
	< GREATER: ">" > |
	< SMALLER: "<" > |
	< GTHENEQUAL: ">=" > |
	< STHENEQUAL: "<=" > |
	< EQUALS: "=="> |
	< MULT: "*" > |
	< DIV: "/" > |
	< EXP: "^" > |
	< DIVEGAL: "/=" > |
	< MODULO: "%" >
	//< NEGATE: "-" >
}




// Identifiers and numbers
TOKEN :
{
	< IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > |
	< #LETTER: ["a"-"z","A"-"Z","_"] > |
	< DIGIT: ["0"-"9"] > |
	< INTEGER: ["1"-"9"] (["0"-"9"])* | "0" > |
	// // Caution! Allows numbers such as "0000.23"
	< REAL: (<INTEGER>)+ "." (["0"-"9"])+ (<EXPONENT>)? |
			  (<INTEGER>)+ <EXPONENT> > |
	< #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
	
	 //
}



//
// SYNTAX ANALYSIS
//

ASTProgram Program() : {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(this, JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Program */
        try {
/*@egen*/
	Block() <EOF>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
	// Block() represente un non-terminal.
	// <EOF> represente le terminal indiquant la fin du flot de caracteres.
}

void Block() : {/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(this, JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Block */
        try {
/*@egen*/
	// TODO: Un bloc est compose de 0, 1 ou plusieurs intructions.
	(Stmt())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Stmt() : {/*@bgen(jjtree) Stmt */
  ASTStmt jjtn000 = new ASTStmt(this, JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Stmt */
        try {
/*@egen*/
	// TODO: Represente une instruction.
	identifiant()
	<CONDITION> identifiant()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void identifiant() : {/*@bgen(jjtree) identifiant */
  ASTidentifiant jjtn000 = new ASTidentifiant(this, JJTIDENTIFIANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) identifiant */
        try {
/*@egen*/
	< IDENTIFIER > ("=" | "+=" | "-=" | "*=" | "/=" | "%=" | "\u02c6=") (< IDENTIFIER > | <DIGIT> | <ARTHM>)* ";"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Calcul() : 
{/*@bgen(jjtree) Calcul */
        ASTCalcul jjtn000 = new ASTCalcul(this, JJTCALCUL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token variable ;
	int valeurCumulative ;
	int valeurNouvelle ;  
}
{/*@bgen(jjtree) Calcul */
        try {
/*@egen*/
	variable = < IDENTIFIER > { valeurCumulative = Integer.parseInt(variable.image) ; }
	
	//( <PLUS> <IDENTIFIER> )
	//|
	( <MINUS> <IDENTIFIER> )
	|
	( <MULT> <IDENTIFIER> )
	|
	( <DIV> <IDENTIFIER> )
	|
	( <EXP> <IDENTIFIER> )
	|
	( <MODULO> <IDENTIFIER> )/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//******/

//******/

// A COMPLETER
// Suggestion: ecrire les regles de la grammaire
// Rappel: Un non-terminal doit definir une fonction.
//         Un terminal est, par exemple, : <IDENTIFIER>
